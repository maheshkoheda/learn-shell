# Infrastructure as a code IaaC
Time to production is faster.
Before terraform even small development the operations on infra was taking long time. Now very less.
Indirectly, downtime is less/reduced almost zero.
Only thing is we initially need more time along side with developer for Infra setup and devlopment.
Less configuration drift when working on Dev to QA to PROD.
Reduce cost by improving downtime so more customers can be using without issues and thus credibility increase.
Alternate tools but not popular are pulumi, crossplane.
Some part of terraform can be done by Ansible too like servers and parameters creation.
Terraform uses HCL HashiCorp Configuration Language.
SDK is offered or development kit available for people with Typscript/python/GoLang/Java too
But we use HCL here. Example:
resource "abc" "xyz" {
 x=10
 y=20
}
Code is in blocks. {} Here we are seeing resource block and more such blocks available.
Resources,variable,output,data,local,module,provider are few blcoks offered by Terraform.
Resources are under provider. Like Github provider provides repository.
https://registry.terraform.io/browse/providers
Around 3500 providers available with resources.
abc is resource name offered by provider and xyz is a local resource name we gave to resource.
x,y is called as arguments. 10,20 are inputs.
Resource offers data after creation called as attributes.
Files should end with .tf. Terraform will load all files in that location so we can make multiple files.
Commands used : Init -> Plan -> Apply -> Destroy
Init will understand code written and download necessary provider plugins+ 2 more things
Plan will tell execution plan what it plans to do when actually apply.
Create resources which are mentioned in code.
If resource already there then TF will not do anything.
Destroy will delete the resources which were created so far by TF.TF will not delete code.
We will not use delete in organisations mostly.
Resource block we find information about in provider documentation.
We will find resource attributes(inputs) and arguments(output) in same resource doc.
Resource can be refered in other resource by using arguments using "provider_resource_name.local_resource_nsame.argument
Ex: abc.r1.x

Variable is block and requires only local name.
Does not require provider name.
Variable reference can be done using var.local_name.
Input can be plain value, list of values or map values.
Variable data types supported are number, boolean and string.TF supports only double quotes for string.
when variable is used in combination of string then access variable using ${}
Ex: "Name is ${var.name}"

Functions (In built ny Terraform)

